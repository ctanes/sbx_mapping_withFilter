# -*- mode: Snakemake -*-

from sunbeamlib import samtools
import pysam
import re

def filter_bam_alignments(bam_in_fp, bam_out_fp, percIdentity, alnLen):
    """                                              
    Filter the alignments in the bam file with the defined percent identity
    and alingment length thresholds.
    bam_in_fp:BAM file name to filer
    bam_out_fp:BAM file name to output
    percIdentity:percent identity threshold (out of 1)
    alnLen:alignment length threshold
    """
    f_in = pysam.AlignmentFile(bam_in_fp)
    with pysam.AlignmentFile(bam_out_fp, "wb", template=f_in) as out_file:
        for item in f_in:
            if(item.has_tag("MD")):
                mdstr = item.get_tag("MD")
                mdSub = re.sub(r'([\\^]*[ACGT]+)[0]*', ' \\1 ', mdstr)
                mdSplit = re.split('[ ]+', mdSub)
                nums = [int(i) for i in mdSplit if i.isdigit()]
                letters = [i for i in mdSplit if not i.isdigit()]
                letters = re.sub('[^ATCG]', '', "".join(letters))
                
                alnLen_seq = sum(nums) + len(letters)
                percIdentity_seq = sum(nums) / alnLen_seq
                
                if (alnLen_seq>alnLen and percIdentity_seq>percIdentity):
                    out_file.write(item)
    f_in.close()


rule all_mapping_withFilter:
    input: TARGET_MAPPING_FILTER

rule filter_aln_quality:
    input:
        str(MAPPING_FP/'{genome}'/'{sample}.bam')
    output:
        str(MAPPING_FP/'{genome}'/'filtered'/'{sample}.bam')
    params:
        alnLen=Cfg['sbx_mapping_withFilter']['alnLen'],
        percIdentity=Cfg['sbx_mapping_withFilter']['percIdentity']
    run:
        print(input)
        filter_bam_alignments(
            input[0], output[0], params.percIdentity, params.alnLen)

rule samtools_get_coverage_filtered:
    input:
        str(MAPPING_FP/'{genome}'/'filtered'/'{sample}.bam')
    output:
        str(MAPPING_FP/'intermediates'/'{genome}'/'filtered'/'{sample}.csv')
    run:
        samtools.get_coverage_stats(
            wildcards.genome, input[0], wildcards.sample, output[0])

#rule samtools_index_filtered:
#    input: str(MAPPING_FP/'{genome}'/'filtered'/'{sample}.bam')
#    output: str(MAPPING_FP/'{genome}'/'filtered'/'{sample}.bam.bai')
#    shell: "samtools index {input} {output}"

def _sorted_filtered_csvs(w):
    pattern = str(MAPPING_FP/'intermediates'/w.genome/'filtered'/'{sample}.csv')
    paths = sorted(expand(pattern, sample=Samples.keys()))
    return(paths)

rule samtools_summarize_filtered_coverage:
    input: _sorted_filtered_csvs
    output:
        str(MAPPING_FP/'{genome}'/'filtered'/'coverage_filtered.csv')
    shell: "(head -n 1 {input[0]}; tail -q -n +2 {input}) > {output}"
    

rule samtools_summarize_num_mapped_reads:
    input: 
        str(MAPPING_FP/'{genome}'/'filtered'/'{sample}.bam')
    output:
        str(MAPPING_FP/'intermediates'/'{genome}'/'{sample}_filtered_numReads.csv')
    shell:
        """
        samtools idxstats {input} | (sed 's/^/{wildcards.sample}\t/') > {output}
        """

rule samtools_summarize_numReads:
    input:
        expand(str(MAPPING_FP/'intermediates'/'{genome}'/'{sample}_filtered_numReads.csv'), genome=GenomeSegments.keys(), sample=Samples.keys())
    output:
        str(MAPPING_FP/'{genome}'/'filtered'/'numReads.csv')
    shell: "(cat {input}) > {output}"